1- a)

float Raiz_Quadrada(unsigned int S)
{
	float x = 1;
	for (int i = 0; i < 50; i++)
		x = (x + S / x) / 2;
	return x;
}

b)sqrt:
	mov.w #1, R14		; x = 1
        mov.w #0, R13		; i = 0
        mov.w R15,R12		; R12 = S
for_sqrt:   
	cmp #50, R13		; i < 50
        jeq end_sqrt       	; Pular para o fim do loop
        mov.w R12,R15		; R15 = S -> Pega sempre o valor de S e não alterá-lo a cada iteração
        push R13            	; R13 na pilha
        call #Div_unsigned	; R15 = R15 / R14 -> S/x
        add R15, R14		; x = x+S/x
        rra R14     		; R14 / 2
        pop R13             	; Recupera R13
        inc.w R13		; i++
        jmp for_sqrt
end_sqrt:   
	mov.w R14,R15
        ret

2- a)

int Potencia(int x, int N);
{
	if(N == 0) 
		return 1;
	int retn = x;
		for(int i = 0; i < N-1; i++)
	retn *= x;
	return retn;
}

b)

Potencia:
	cmp #0, R14		; N == 0
        jeq Potencia_1
        mov.w #0, R12		; i = 0
        dec.w R14		; N--
        mov.w R15, R13          ; R13 = X
loop_potencia:
	cmp R14, R12		; i < N-1
        jeq Fim_potencia	; Pular se i == N-1
        push R14
        push R12
        push R13
        mov.w R13, R14		; R14 = x
        call #Mult_unsigned	; R15 = R15*x
        pop R13
        pop R12
        pop R14
        inc.w R12	        ; i++
        jmp loop_potencia
Potencia_1:
	mov.w #1, R15
Fim_potencia:
	ret



3-	
Div_unsigned:
	clr R13;
for_div:
	cmp R14,R15
	jl End_for_div
	sub R14,R15
	inc R13
	jmp for_div
End_for_div:
	mov R13,R15
	ret

4-
Divisao_uns:	
	push R4;	
	clr R4;		
	tst R14
	jz Divisao_uns_else
Divisao_uns_while:	
	cmp R14, R15
	jl Divisao_uns_else
	sub R14, R15
	inc R4
	jmp Divisao_uns_while
Divisao_uns_else:
	mov R4, R15
	pop R15
	ret


5 - a)int Primalidade (unsigned int x)
	{
	unsigned int d;
	if(x<2) return 0;
	if((x&1)==0) return 0;	
	d=x/2;
	while(d>2)
		{
		if((x%d)==0) return 0;
		d--;
		}
	return 1;
	}

b)
	Primalidade:
		push R4 	;d
		cmp #2, R15
		jge Teste_par
	Prim_zero:	
		pop R4
		clr R15
		ret
	Teste_par:
		mov R15, R14
		and #1, R14
		cmp #0, R14
		jeq Prim_zero
	Teste_impar:
		mov R15, R4
		rra R4 		;d=x/2
	Prim_while:
		cmp #2, R4
		jeq Prim_end
		push R15
		mov R4, R14
		call Resto_uns
		mov R15, R14
		pop R15
		cmp #0, R14
		jeq Prim_zero
		dec R4
		jmp Prim_while
	Prim_end:
		pop R4
		mov #1,R15
		ret

8- //////////////// em c ///////////////////

int vetor_Dec(int x[], int N)
{ 
	int i;
	for (i=0; i<(N-1); i++)
	{
		if (x[i]<x[i+1])
		{
			return 0;
		{
	}
	return 1;
}

return 0;

						OU

int vetor_Dec(int x[], int N)
{ 
	int i;
	for (i=0; i<(N-1); i++, x++)
	{
		if ((*x)<(*(x+1)))
		{
			return 0;
		{
	}
	return 1;
}

return 0;

////////////// em assembly ///////////////


Vetor_Dec:
	push R4
	clr R4    		;i=0
	mov R14, R13
	dec R13			;R13=N-1	 
Vetor_Dec_For:
	cmp R13, R4		;R4>R13 ?	
	jge Vetor_Dec_End	; Se sim pula pra funçao Vetor_Dec_End, senao segue o baile
	cmp 2(R15), 0(R15)
	jge Vetor_Dec_Inc
	pop R4
	clr R15
	ret
Vetor_Dec_Inc:
	inc R4
	incd R15
	jmp Vetor_Dec_For
Vetor_Dec_End:
	pop R4
	mov #1, R15
	ret
	
10- a)
int Palindromo(int vetor[ ], int tamanho);
{
	int i, k=tamanho-1;
	tamanho = tamanho/2-1
	for (i=0; i<=tamanho;i++,k--;
	{
		if (vetor[i]!=vetor[k])
		{
			return 0;
		}
	}
	return 1;
}


b)
Palindromo:
	push R4
	push R5
	clr R4		;i=0
	mov R14, R5
	dec R5		;k=N-1
	rra R14		;k/2
	dec R14		;k/2-1
Palin_test:	
	cmp R4, R14
	jl Palin_end
	mov R4, R12
	rla R12
	add R15, R12
	mov R5, R13
	rla R13
	add R15, R13
	cmp 0(R12), 0(R13)
	jeq Palin_inc
	pop R5
	pop R4
	clr R15
	ret
Palin_inc:
	inc R4
	dec R5
	jmp Palin_test
Palin_end:
	pop R5
	pop R4
	mov #1, R15
	ret
	




 



