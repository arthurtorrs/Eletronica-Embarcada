1 -

#include <msp430.h> 

#define BTN BIT3
#define LED BIT0
#define ACENDE_LED (P1OUT |= LED)
#define APAGA_LED (P1OUT &= ~LED)

int Debounce();
void espera_ms(int tempo);

int main(void)
{
	WDTCTL = WDTPW | WDTHOLD;	// stop watchdog timer
	P1DIR |= LED;
	P1OUT &= ~LED;
	P1DIR &= ~BTN;
	P1REN |= BTN;
	P1OUT |= BTN;

	while(1)
	 Debounce() == 1 ? ACENDE_LED : APAGA_LED;

	return 0;
}

int Debounce()
{
    if((P1IN & BTN)==0)
    {
        espera_ms(30);
        if((P1IN & BTN) == 0)
            return 1;
    }
    return 0;
}

void espera_ms(int tempo)
{
    TACCR0 = 1000-1;
    TACTL = TACLR; 
    TACTL = TASSEL_2 + ID_0 + MC_1;

   while(tempo > 0)
    {
       while((TACTL&TAIFG) == 0);
       tempo--;
    }

   TACTL = TACLR;
}


2 -

#include <msp430.h>

#define ROW1 BIT2
#define ROW2 BIT3
#define ROW3 BIT4

#define COL1 BIT5
#define COL2 BIT6
#define COL3 BIT7

#define LED1 BIT0
#define LED2 BIT1
#define LEDS (LED1|LED2)

void pisca(); 
void Atraso_ms(volatile unsigned int ms); 
int numPos(long unsigned int i, long unsigned int j); 

void main(void)
{
    int coord[3][3]; 				//[Linhas][Colunas]
    long unsigned int i, j;
    int q_press, num;
    WDTCTL = WDTPW | WDTHOLD;
    P1DIR |= LEDS;
    P1DIR &= ~(ROW1 + ROW2 + ROW3); 		// entradas inicialmente
    P1DIR |= (COL1 + COL2 + COL3); 		// saidas inicialmente
    P1REN |= (ROW1 + ROW2 + ROW3); 		// ativa resistores nas entradas
    P1OUT |= (ROW1 + ROW2 + ROW3); 		// pull-up

    while(1)
    {
        q_press = 0;
        coord = [ [0,0,0], [0,0,0], [0,0,0] ];

        // Linhas são entradas, Colunas são saídas
        P1DIR |= LEDS;
        P1DIR &= ~(ROW1 + ROW2 + ROW3); 	// entradas inicialmente
        P1DIR |= (COL1 + COL2 + COL3); 		// saidas inicialmente

        P1REN |= (ROW1 + ROW2 + ROW3); 		// ativa resistores nas entradas
        P1OUT |= (ROW1 + ROW2 + ROW3); 		// ativa-os como pull-up
        P1OUT &= ~(COL1 + COL2 + COL3);

        for (i = 1000; i <= 10000; i*= 10)
            if ((P1IN & i) == 0 )
                for (j = 0; j < 3; j++)
                    coord[i][j] = 1; 		// soma 1 a toda a coluna que foi apertada

        // ROWs são saídas, COLs são entradas
        P1DIR |= (ROW1 + ROW2 + ROW3); 		// saídas
        P1DIR &= ~(COL1 + COL2 + COL3); 	// entradas
        P1REN |= (COL1 + COL2 + COL3); 		// ativa resistores nas entradas
        P1OUT |= (COL1 + COL2 + COL3); 		// ativa-os como pull-up
        P1OUT &= ~(ROW1 + ROW2 + ROW3);

        for (i = 100000; i <= 10000000; i*= 10)
            if ((P1IN & i) == 0 )
                for (j = 0; j < 3; j++)
                    coord[j][i] = 1; 		// soma 1 a toda a linha que foi apertada

        for (i = 0; i < 3; i++)
        {
            for (j = 0; j < 3; j++)
            {
                // conta quantos botões apertados foram registrados
                if(coord[i][j] == 2)
                    q_press++;
                      num = coord[i][j] == 2 ? numPos(i,j) : num;
            }
        }
        if (q_press == 1)
            for(i=0; i < num; i++)
                pisca();
    }
}

void pisca()
{
    P1OUT |= LEDS;
    Atraso_ms(1000);
    P1OUT &= ~LEDS;
}

void Atraso_ms(volatile unsigned int ms)
{
    TACCR0 = 1000-1;
    TACTL = TACLR;
    TACTL = TASSEL_2 + ID_0 + MC_1;
    while(ms--)
    {
        while((TACTL&TAIFG)==0);
        TACTL &= ~TAIFG;
    }
    TACTL = MC_0;
}

int numPos(long unsigned int i, long unsigned int j)
{
    return (int) 3*j+i+1;
}